import React, { createContext, useContext } from 'react';

export interface EmailContextType {
  emails: any[]; // Replace 'any' with a more specific type if available
  loading: boolean;
  error: string | null;
  fetchEmails: (params: { category: string; stressLevel: string }) => void;
}

const EmailContext = createContext<EmailContextType | undefined>(undefined);

export const EmailProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // Initialize your email data here with default values.
  // The fetchEmails function now accepts an object containing category and stressLevel.
  const emailState: EmailContextType = {
    emails: [],
    loading: false,
    error: null,
    fetchEmails: (params: { category: string; stressLevel: string }) => {
      // Implementation for fetching emails can be added here
      console.log("Fetching emails with params", params);
    },
  };

  return (
    <EmailContext.Provider value={emailState}>
      {children}
    </EmailContext.Provider>
  );
};

export const useEmailContext = (): EmailContextType => {
  const context = useContext(EmailContext);
  if (!context) {
    throw new Error('useEmailContext must be used within an EmailProvider');
  }
  return context;
};